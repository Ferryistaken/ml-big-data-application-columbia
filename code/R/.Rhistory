addEMA(50, col = 'green'),
addEMA(200, col = 'cyan'),
addEMA(12, col = 'yellow')
))
chartSeries(ARKK[1400:1676, ],
#theme = chartTheme("black"),
name = "ARKK ETF",
TA = c(
addEMA(50, col = 'green'),
addEMA(200, col = 'cyan'),
addEMA(12, col = 'yellow')
))
chartSeries(ARKK[1400:1676, ],
#theme = chartTheme("black"),
name = "ARKK ETF",
TA = c(
addEMA(50, col = 'green'),
addEMA(200, col = 'cyan'),
addEMA(12, col = 'yellow')
))
chartSeries(ARKK[1400:1676, ],
theme = chartTheme("black"),
name = "ARKK ETF",
TA = c(
addEMA(50, col = 'green'),
addEMA(200, col = 'cyan'),
addEMA(12, col = 'yellow')
))
dev.off()
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tolls.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tolls.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tolls.R", echo=TRUE)
install.packages("dygraphs")
library(dygraphs)
dygraph(ARKK) %>% dyCandlestick() %>%
dyLegend(show = "onmouseover", hideOnMouseOut = TRUE) %>%
dyRangeSelector()
newData = ARKK[, 1:4]
dygraph(newData) %>% dyCandlestick() %>%
dyLegend(show = "onmouseover", hideOnMouseOut = TRUE) %>%
dyRangeSelector()
View(ARKK)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
plot(ARKK$ARKK.Close)
plot(quantmod::dailyReturn(ARKK$ARKK.Close))
hist(ARKKReturn)
ARKKReturn = quantmod::dailyReturn(ARKK$ARKK.Close)
hist(ARKKReturn)
hist(rnorm(lenght(ARKKReturn), 0, 1)
hist(rnorm(lenght(ARKKReturn), 0, 1)
hist(rnorm(lenght(ARKKReturn), 0, 1))
hist(rnorm(length(ARKKReturn), 0, 1))
par(mfrom(1, 2))
par(mfrow(1, 2))
par(mfrow = c(1, 2))
hist(ARKKReturn)
hist(rnorm(length(ARKKReturn), 0, 1))
hist(ARKKReturn)
hist(rnorm(length(ARKKReturn), 0, 0.02))
# sd() <- standard deviation, sd()^2 = variance
sd(ARKKReturn)
# mean()  <- sample average
mean(ARKKReturn)
hist(rnorm(length(ARKKReturn), mean(ARKKReturn), sd(ARKKReturn)))
hist(ARKKReturn)
hist(ARKKReturn)
hist(rnorm(length(ARKKReturn), mean(ARKKReturn), sd(ARKKReturn)))
# mean()  <- sample average
mean(ARKKReturn, breaks = 10)
# mean()  <- sample average
mean(ARKKReturn, breaks = 30)
hist(ARKKReturn)
hist(rnorm(length(ARKKReturn), mean(ARKKReturn), sd(ARKKReturn)))
source("../day2/hw-day2.R")
dirname(getwd())
source("day2/hw-day2.R")
mcmcPlotLines(paths, time, mean, sd)
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
ARKKReturn = quantmod::dailyReturn(ARKK$ARKK.Close)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
getSymbols("ARKK")
ARKKReturn = quantmod::dailyReturn(ARKK$ARKK.Close)
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
dev.of()
dev.off()
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
ARKKReturn = quantmod::dailyReturn(ARKK$ARKK.Close[1000:1676])
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(paths, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(5, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(5, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(5, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(5, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(5, 250, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(5, 360, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(5, 360, mean(ARKKReturn), sd(ARKKReturn))
mcmcPlotLines(5, 360, mean(ARKKReturn), sd(ARKKReturn))
matrix(rnorm(250*10), 0, 0.001) + 1L, norw = 250, ncol = 10)
matrix(rnorm(250*10, 0, 0.001) + 1L, norw = 250, ncol = 10)
matrix(rnorm(250*10, 0, 0.001) + 1L, nrow = 250, ncol = 10)
# apply(X, margin, function). X = data that you want to apply the function to
# margin = which direction. row = 1, col = 2
# function = whatever function, without paranthesis you want to apply here
apply(X, 2, cumprod)
X = matrix(rnorm(250*10, 0, 0.001) + 1L, nrow = 250, ncol = 10)
# apply(X, margin, function). X = data that you want to apply the function to
# margin = which direction. row = 1, col = 2
# function = whatever function, without paranthesis you want to apply here
apply(X, 2, cumprod)
matplot(cumX)
# apply(X, margin, function). X = data that you want to apply the function to
# margin = which direction. row = 1, col = 2
# function = whatever function, without paranthesis you want to apply here
cumX = apply(X, 2, cumprod)
matplot(cumX)
matplot(cumX, type = "1")
matplot(cumX, type = "1")
matplot(cumX, type = "l")
X = matrix(rnorm(360*100, 0, 0.001) + 1L, nrow = 250, ncol = 10)
# apply(X, margin, function). X = data that you want to apply the function to
# margin = which direction. row = 1, col = 2
# function = whatever function, without paranthesis you want to apply here
cumX = apply(X, 2, cumprod)
matplot(cumX, type = "l")
X = matrix(rnorm(360*100, 0, 0.001) + 1L, nrow = 360, ncol = 100)
# apply(X, margin, function). X = data that you want to apply the function to
# margin = which direction. row = 1, col = 2
# function = whatever function, without paranthesis you want to apply here
cumX = apply(X, 2, cumprod)
matplot(cumX, type = "l")
ARKKReturn = quantmod::dailyReturn(ARKK$ARKK.Close[1000:1676])
# apply(X, margin, function). X = data that you want to apply the function to
# margin = which direction. row = 1, col = 2
# function = whatever function, without paranthesis you want to apply here
head(cumX = apply(X, 2, cumprod))
X = matrix(rnorm(360*100, 0, 0.001) + 1L, nrow = 360, ncol = 100)
# apply(X, margin, function). X = data that you want to apply the function to
# margin = which direction. row = 1, col = 2
# function = whatever function, without paranthesis you want to apply here
head(cumX = apply(X, 2, cumprod))
# apply(X, margin, function). X = data that you want to apply the function to
# margin = which direction. row = 1, col = 2
# function = whatever function, without paranthesis you want to apply here
cumX = apply(X, 2, cumprod)
head(cumX)
d = 1 # tracks the index of generations
mu = 0 # mean
s = 0.005 # sd
nSim = 10
nDays = 25
data = matrix(rnorm(nSim*nDays, mean = mu, sd = s), nrow = nDays)
data[1, ] = 0L # Enforce the first to be 0
# return the price from returns
for (N in seq(10, nDays, 10)) {
}
?L
??L
d = 1 # tracks the index of generations
mu = 0 # mean
s = 0.005 # sd
nSim = 10
nDays = 25
data = matrix(rnorm(nSim*nDays, mean = mu, sd = s), nrow = nDays)
data[1, ] = 0L # Enforce the first to be 0
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s)
)
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
col = 1,
xlim = c(1, nDays)
)
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
col = 1,
xlim = c(1, nDays)
)
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
col = 1,
xlim = c(1, nDays)
)
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = "i")
}
}
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
nDays = 25
data = matrix(rnorm(nSim*nDays, mean = mu, sd = s), nrow = nDays)
data[1, ] = 0L # Enforce the first to be 0
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
nDays = 25
data = matrix(rnorm(nSim*nDays, mean = mu, sd = s), nrow = nDays)
data[1, ] = 0L # Enforce the first to be 0
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
nDays = 25
data = matrix(rnorm(nSim*nDays, mean = mu, sd = s), nrow = nDays)
data[1, ] = 0L # Enforce the first to be 0
# return the price from returns
for (N in seq(10, nDays, 10)) {
selectedData = data[1:N, ]
cumRet = selectedData + 1L # 1L so that it's for each element in the matrix
cumRetPath = apply(cumRet, 2, cumprod)
plot(
x = 1:N,
y = cumRetPath[,1],
main = paste0("Simulated Path for $1 ", "\nMean = ", mu,"SD = ", s),
type = "l",
col = 1,
xlim = c(1, nDays),
ylim = c(min(cumRetPath), max(cumRetPath)))
for (i in 2:nSim) {
lines(x = 1:N, y = cumRetPath[, i], type = "l", col = i)
}
}
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
dev.off()
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
seq(10, nDays, 10)
ARKKReturn = quantmod::dailyReturn(ARKK$ARKK.Close[1000:1676])
ARKKReturn
summary(ARKKReturn)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
ARKKReturn = quantmod::dailyReturn(ARKK$ARKK.Close)[1:25]
ARKKReturn
ARKKReturnTemp = ARKKReturn[1:25] # segment that I want to analyze
dim(ARKKReturnTemp)
length(ARKKReturnTemp)
k = 1
ARKKReturnTemp = ARKKReturn[k:k + nDays - 1] # segment that I want to analyze
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
ARKKReturnTemp
k = 1
ARKKReturnTemp = ARKKReturn[k:k + nDays - 1] # segment that I want to analyze
ARKKReturnTemp
N = 10
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day3/visualization-tools.R", echo=TRUE)
