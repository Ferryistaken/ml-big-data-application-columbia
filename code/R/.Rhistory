addVo())
)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
type = "auto",
layout = NULL,
theme = chart_theme(),
TA = c(
addEMA(50, col = 'yellow'),
addEMA(200, col = 'blue'),
addVo())
)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
type = "auto",
layout = NULL,
theme = chart_theme(),
TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
type = "auto",
layout = NULL,
theme = chart_theme(),
TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
chart_Series(volume,
name = paste0("Daily volume for", ticker),
layout = NULL,
)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
type = "auto",
layout = NULL,
theme = chart_theme(),
TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
rm(list = ls())
gc()
dev.off()
ticker <- "MSFT"
stock <- getSymbols(ticker,
auto.assign = FALSE,
from = paste0("2020-", "01-", "01"))
PriceStartingFromOne <- cumprod(Returns$daily.returns + 1)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
type = "auto",
layout = NULL,
theme = chart_theme(),
TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
PriceStartingFromOne <- cumprod(Returns$daily.returns + 1)
Returns <- quantmod::dailyReturn(stock)
PriceStartingFromOne <- cumprod(Returns$daily.returns + 1)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
type = "auto",
layout = NULL,
theme = chart_theme(),
TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
rm(list = ls())
gc()
ticker <- "ARKK"
stock <- getSymbols(ticker,
auto.assign = FALSE,
from = paste0("2020-", "01-", "01"))
tail(stock)
Returns <- quantmod::dailyReturn(stock)
chart_Series(Returns,
name = paste0("Daily returns for ", ticker),
layout = NULL,
theme = chart_theme(),
)
library(quantmod)
chart_Series(Returns,
name = paste0("Daily returns for ", ticker),
layout = NULL,
theme = chart_theme(),
)
Returns <- quantmod::dailyReturn(stock)
ticker <- "ARKK"
stock <- getSymbols(ticker,
auto.assign = FALSE,
from = paste0("2020-", "01-", "01"))
tail(stock)
Returns <- quantmod::dailyReturn(stock)
chart_Series(Returns,
name = paste0("Daily returns for ", ticker),
layout = NULL,
theme = chart_theme(),
)
PriceStartingFromOne <- cumprod(Returns$daily.returns + 1)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
type = "auto",
layout = NULL,
theme = chart_theme(),
TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
type = "auto",
layout = NULL,
theme = chart_theme(),
TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
layout = NULL,
theme = chart_theme(),
TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
chart_Series(PriceStartingFromOne,
name = paste0("Time series from ", ticker, ", repositioned to 1$"),
layout = NULL,
theme = chart_theme(),
#TA = "addEMA(50, col = 'yellow');addEMA(200, col = 'blue')",
)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
dev.off()
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/stock-data.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
ggplot(closeDataTime)
ggplot(closeDataTime,
aes(x = date, y = close) +
geom_line() +
labs(title = "Stock Chart", y = "Closing Price", x = "") +
theme_tq()
)
closeData %>%
ggplot(aes(x=index,y=value, color=series)) + geom_line()
closeData[, 2] %>%
ggplot(aes(x=index,y=value, color=series)) + geom_line()
ggplot(closeDataTime, aes(Xax,value, col=variable)) +
geom_point() +
stat_smooth()
quick_plot(closeDateTime)
qplot(closeDateTime)
qplot(closeDateTime)
qplot(closeDataTime)
ggplot(closeDataTime, aes(x = Index, y = value)) + geom_point()
ggplot(closeDataTime, aes(x = Index, y = value)) + geom_point()
autoplot(closeDataTime, geom = "line")
ggplot(closeData)
returnsList <- apply(closeDataTime, 2, quantmod::dailyReturn)
tail(closeDataTime)
head(closeDataTime)
returnsList <- apply(closeDataTime, 2, quantmod::dailyReturn)
returnsList <- apply(closeDataTime, 2, quantmod::Delt)
View(returnsList)
plot(cumprod(returnList))
plot(cumprod(returnsList))
plot(cumprod(returnsList))
plot(cumprod(returnsList), xlim = c(1, 5000), ylim = c(1, 50000))
plot(cumprod(returnsList), xlim = c(1, 5000), ylim = c(1, 500))
cumprod(returnsList)
View(returnsList)
cumprod(returnsList + 1)
returnsList + 1
returnsList <- apply(closeDataTime, 2, quantmod::Delt) + 1
View(returnsList)
apply(returnsList, 2, cumprod)
apply(returnsList, 2, cumprod)
returnsList
apply(closeDataTime, 2, quantmod::Delt)
returnsList = returnsList[-1,]
View(returnsList)
apply(returnsList, 2, cumprod)
cumprod(returnsList[, 1])
returnsList[, 1]
View(returnsList)
cumprod(returnsList[, 1])
cumprod(returnsList[, 7])
returnsList <- apply(closeDataTime, 2, quantmod::Delt) + 1
returnsList = returnsList[-1,]
cumprod(returnsList[, 7])
returnsList <- apply(closeDataTime, 2, quantmod::Delt) + 1
View(returnsList)
returnsList = returnsList[-1,]
View(returnsList)
apply(returnsList, 2, cumprod)
returnsList, 2, cumprod
returnsList
apply(returnsList, 2, cumprod)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
View(closeDataTime)
View(returnsList)
apply(returnsList, 2, cumprod)
plot(returnsList)
View(closeDataTime)
cumprod(returnsList[, 2])
cumprod(returnsList[2, ])
cumprod(returnsList[, 2])
returnsList[, 2]
cumprod(returnsList[, 2])
plot(cumprod(returnsList[, 2]))
apply(returnsList, 2, cumprod)
applied <- apply(returnsList, 2, cumprod)
View(applied)
plot(applied)
ggplot(applied, aes(index, value)) +
geom_line(aes(colour = series))
plot(applied[, 1])
plot(applied[, 2])
plot(applied[, 3])
plot(applied[, 3], type = "l")
applied[, 2]
applied
rownames(closeData)
rownames(applied) = rownames(closeData)
rownames(applied) = rownames(closeData)[-1, ]
rownames(closeData)[-1]
rownames(applied) = rownames(closeData)[-1]
appliedTime <- as.xts(applied)
applied$Date <- rownames(closeData)[-1]
View(applied)
applied
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
applied <- apply(returnsList, 2, cumprod)
View(applied)
rownames(closeData)[-1]
rownames(closeData)
applied["Date"] <- rownames(closeData)[-1]
applied <- apply(returnsList, 2, cumprod)
length(rownames(closeData)[-1])
dim(applied)
rowname(closeData)[-1]
rownames(closeData)[-1]
appliedWithDate <- cbind(applied, Date = rownames(closeData)[-1])
View(appliedWithDate)
ggplot(data = appliedWithDate,
mapping = aes(x = Date,
y = AAPL.Close))
appliedWithDate <- cbind(applied, Date = rownames(closeData)[-1])
class(appliedWithDate)
as.data.frame(appliedWithDate)
df <- as.data.frame(appliedWithDate)
View(df)
ggplot(data = df,
mapping = aes(x = Date,
y = AAPL.Close))
df$Date
df$AAPL.Close
ggplot(data = df,
mapping = aes(x = Date,
y = AAPL.Close))+
geom_line()
ggplot(data = df,
mapping = aes(x = Date,
y = AAPL.Close))+
geom_point()
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
ggplot(data = df,
mapping = aes(x = Date,
y = AAPL.Close))+
geom_line()
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
View(df)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
dev.off()
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
View(df)
df$Date <- as.Date(df$Date)
df$Date <- as.Date(df$Date)
ggplot(df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
labs(x = "Date", y = "Apple closing price") +
scale_x_date(labels = date_format("%Y-%m-%d"))
library(scales)
ggplot(df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
labs(x = "Date", y = "Apple closing price") +
scale_x_date(labels = date_format("%Y-%m-%d"))
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
dygraphs(appliedWithDate)
library(dygraphs)
dygraph(appliedWithDate)
dygraph(applied)
dygraph(applied)
class(applied)
appliedTime <- as.xts(applied)
View(applied)
appliedTime <- as.data.frame(applied)
appliedTimeDf <- as.xts(appliedTime)
appliedTimeDf <- as.xts(appliedTime)
dygraph(appliedTime)
appliedTimeDf <- as.xts(appliedTime)
applied <- apply(returnsList, 2, cumprod)
View(applied)
rownames(applied) = rownames(closeData)[-1]
applied <- apply(returnsList, 2, cumprod)
View(applied)
rownames(applied) = rownames(closeData)[-1]
dygraph(applied)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
dygraph(applied)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
rm(list = ls())
gc()
stockArray <- c("AAPL", "MSFT", "RTX", "GOOGL", "V", "AMZN", "NVDA", "KO")
startDate <- paste0("2010-", "01-", "01")
########### GET STOCK DATA ####################
stock <- lapply(as.list(stockArray), function(x) {
tmp <- try(getSymbols(x, from=startDate,   auto.assign= FALSE))
if(!inherits(tmp, 'try-error'))
tmp})
allData <- as.data.frame(stock)
closeData <- select(allData, contains("Close"))
closeDataTime <- as.xts(closeData)
allData <- as.data.frame(stock)
closeData <- select(allData, contains("Close"))
closeDataTime <- as.xts(closeData)
returnsList <- apply(closeDataTime, 2, quantmod::Delt) + 1
returnsList = returnsList[-1,]
rownames(applied) = rownames(closeData)[-1]
applied <- apply(returnsList, 2, cumprod)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
View(allData)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
dygraph(applied, main = paste0("Returns for ", paste(sdata, collapse = ', ')))
dygraph(applied, main = paste0("Returns for ", paste(stocArray, collapse = ', ')))
dygraph(applied, main = paste0("Returns for ", paste(stockArray, collapse = ', ')))
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
dygraph(applied,
main = paste0("Returns for ", paste(stockArray, collapse = ', '))
) %>%
dyLegend(show = "follow") %>%
dyEvent("2014-01-01", labelLoc = "bottom")
dygraph(applied,
main = paste0("Returns for ", paste(stockArray, collapse = ', '))
) %>%
dyLegend(show = "follow") %>%
dyEvent("2014-01-01", "WSB", labelLoc = "bottom")
class(applied)
applied <- as.xts(applied)
View(applied)
dygraph(applied,
main = paste0("Returns for ", paste(stockArray, collapse = ', '))
) %>%
dyLegend(show = "follow") %>%
dyEvent("2014-01-01", "WSB", labelLoc = "bottom")
startDate <- paste0(startYear, "-" startMonth, "-", startDay)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
View(applied)
View(closeData)
View(closeDataTime)
View(returnsList)
View(closeData)
rownames(closeData)[-1]
head(rownames(closeData)[-1])
head(rownames(closeData))
head(rownames(closeData)[-1], 10)
investment <- ts(data = NA, start = c(startYear, startMonth, startDay), frequency = 365)
head(investment)
head(investment)
investment
class(applied)
investment <- data.frame(row.names = rownames(applied))
View(investment)
View(applied)
applied[, 1]
cumprod(applied[, 1])
plot(cumprod(applied[, 1]))
plot(cumprod(applied[, 1]) + 1)
colnames(applied)[apply(applied, 1, which.max)]
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
stockArray <- c("AAPL", "MSFT", "RTX", "GOOGL", "V", "AMZN", "NVDA", "KO", "STT", "ROK", "BA", "GWW", "TJX", "WBA", "MCD", "BRK-A")
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
for (i in 1:nrow(applied)) {
if (i %% 20) {
print(i)
}
for (i in 1:nrow(applied)) {
print(i)
}
40 %% 20
40 %% 20 == 0
40 %% 21 == 0
40 %% 2 == 0
for (i in 1:nrow(applied)) {
if (i %% 20) {
print(i)
}
}
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/general-code/monthly-growth-strategy/growth-strategy.R", echo=TRUE)
for (i in 1:nrow(applied)) {
if (i %% 20 == 0) {
print(rownames(applied)[i])
}
}
rownames(applied)
rownames(applied)
colnames(applied)
rownames(applied)
class(applied)
index(applied)
for (i in 1:nrow(applied)) {
if (i %% 20 == 0) {
print(index(applied)[i])
}
}
install.packages("keras")
install.packages("tensorflow")
library(keras)
install_keras(tensorflow= "gpu")
install_keras(tensorflow = "gpu")
library(tensorflow)
install_tensorflow(version = "gpu")
library(tensorflow)
install_tensorflow(version = "gpu")
library(keras)
install_keras(tensorflow = "gpu")
library(tensorflow)
install_tensorflow(version = "gpu")
install_tensorflow()
library(tensorflow)
install_tensorflow()
tf$constant("Hellow Tensorflow")
rm(list = ls())
gc()
data = read.csv(/home/ferry/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/archive/data.csv)
data = read.csv("/home/ferry/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/archive/data.csv")
View(data)
data = data[, -1]
data = data[, -ncol(data)]
data = data.frame(y=data$diagnosis, data[, -1])
head(data)
as.numeric(as.factor(data$y))
as.numeric(as.factor(data$y))-1
rm(list = ls())
gc()
source("~/Documents/learning/columbia/columbia-machine-learning-big-data-real-world-applications/code/R/day6/neural-network.R", echo=TRUE)
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
library(tensorflow)
install_tensorflow(version = "gpu")
install_keras(tensorflow = "gpu")
require(devtools)
install_version("keras", version = "2.3.0.0")
install_keras(tensorflow = "gpu")
install.packages("keras")
install.packages("keras")
library(keras)
install_keras(tensorflow = "gpu")
ibrary(tensorflow)
library(tensorflow)
install_tensorflow(version = "gpu")
install_keras(tensorflow = "gpu")
library(keras)
install_keras(tensorflow = "gpu")
library(keras)
install_keras(tensorflow = "gpu")
library(tensorflow)
install_tensorflow(version = "gpu")
install_keras(tensorflow = "gpu")
install_tensorflow(version = "gpu")
install_tensorflow(version = "gpu")
install_keras(tensorflow = "gpu")
install_keras(tensorflow = "gpu")
library(keras)
install_keras(tensorflow = "gpu")
library(tensorflow)
install_tensorflow(version = "gpu")
require(devtools)
install_version("keras", version = "2.3.0.0")
packageVersion(keras)
library(keras)
packageVersion(keras)
sessionInfo()
install_keras(tensorflow = "gpu")
install_keras
install_keras
install.packages("keras")
install.packages("keras")
install_keras(tensorflow = "gpu")
library(keras)
install_keras(tensorflow = "gpu")
library(tensorflow)
tensorflow::tf_gpu_configured()
renv::activate()
library(keras)
install.packages("keras")
install.packages("tensorflow")
install_tensorflow(version = "gpu")
library(tensorflow)
install_tensorflow(version = "gpu")
install.packages("quantmod")
install_keras(tensorflow = "gpu")
install_keras()
library(keras)
install_keras(tensorflow = "gpu")
install_keras()
dependencies()
